@model IEnumerable<Vehicle_Data.Models.Vehicle>

@{
    ViewData["Title"] = "Vehicle Table";
    int pageNumber = ViewBag.PageNumber ?? 1;
    int pageSize = ViewBag.PageSize ?? 10;
    int totalRecords = ViewBag.TotalRecords ?? 0;
    int totalPages = (int)Math.Ceiling((double)totalRecords / pageSize);
    int? dealerId = ViewBag.DealerId;
    DateOnly? modifiedDate = ViewBag.ModifiedDate;
}

<h1>Vehicle Table</h1>

<form method="get" action="/Home/Vehicle_Table">
    <div class="form-group">
        <label for="dealerId">Filter by Dealer ID:</label>
        <input type="text" id="dealerId" name="dealerId" class="form-control" value="@dealerId" inputmode="numeric" />
    </div>
    <div class="form-group">
        <label for="modifiedDate">Filter by Modified Date After:</label>
        <input type="date" id="modifiedDate" name="modifiedDate" class="form-control" value="@modifiedDate?.ToString("yyyy-MM-dd")" />
    </div>
    <div class="form-group">
        <label for="pageSize">Page Size:</label>
        <input type="number" id="pageSize" name="pageSize" class="form-control" value="@pageSize" min="1" />
    </div>
    <button type="submit" class="btn btn-primary">Apply Filters</button>
    <button type="button" class="btn btn-secondary" onclick="window.location.href='/Home/Vehicle_Table'">Clear All Filters</button>
</form>

<table class="table table-striped mt-4">
    <thead>
        <tr>
            <th>Id</th>
            <th>VIN</th>
            <th>Dealer ID</th>
            <th>Modified Date</th>
            <th>Make</th>
            <th>Model</th>
            <th>Year</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var vehicle in Model)
        {
            <tr onclick="toggleRowDetails(this, '@vehicle.Vin')" style="cursor: pointer;">
                <td>@vehicle.Id</td>
                <td>@vehicle.Vin</td>
                <td>@vehicle.DealerId</td>
                <td>@vehicle.ModifiedDate</td>
                <td>@vehicle.Make</td>
                <td>@vehicle.Model</td>
                <td>@vehicle.Year</td>
            </tr>
        }
    </tbody>
</table>

<div class="pagination">
    <nav>
        <ul class="pagination">
            @if (pageNumber > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Vehicle_Table", new { pageNumber = pageNumber - 1, pageSize, dealerId, modifiedDate })">Previous</a>
                </li>
            }
            @for (int i = 1; i <= totalPages; i++)
            {
                <li class="page-item @(i == pageNumber ? "active" : "")">
                    <a class="page-link" href="@Url.Action("Vehicle_Table", new { pageNumber = i, pageSize, dealerId, modifiedDate })">@i</a>
                </li>
            }
            @if (pageNumber < totalPages)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Vehicle_Table", new { pageNumber = pageNumber + 1, pageSize, dealerId, modifiedDate })">Next</a>
                </li>
            }
        </ul>
    </nav>
</div>

<script>
    let currentlyExpandedRow = null; // Track the currently expanded row

    async function toggleRowDetails(row, vin) {
        console.log(`Row clicked for VIN: ${vin}`); // Debugging log

        // Close the currently expanded row if it's not the same as the clicked row
        if (currentlyExpandedRow && currentlyExpandedRow !== row) {
            const previousDetailsRow = currentlyExpandedRow.nextElementSibling;
            if (previousDetailsRow && previousDetailsRow.classList.contains('details-row')) {
                console.log("Closing previously expanded row."); // Debugging log
                previousDetailsRow.remove();
            }
            currentlyExpandedRow = null;
        }

        // Check if the clicked row is already expanded
        const detailsRow = row.nextElementSibling;
        if (detailsRow && detailsRow.classList.contains('details-row')) {
            console.log("Toggling visibility of existing details row."); // Debugging log
            detailsRow.remove();
            currentlyExpandedRow = null;
            return;
        }

        console.log("Creating a new details row."); // Debugging log

        // Create a new details row
        const newRow = document.createElement('tr');
        newRow.classList.add('details-row');
        const cell = document.createElement('td');
        cell.colSpan = row.children.length;

        // Add a loading spinner
        cell.innerHTML = `
            <div style="text-align: center;">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        `;
        newRow.appendChild(cell);
        row.parentNode.insertBefore(newRow, row.nextSibling);

        currentlyExpandedRow = row; // Set the currently expanded row

        try {
            console.log(`Fetching data from API for VIN: ${vin}`); // Debugging log

            // Fetch data from the NHTSA API
            const response = await fetch(`https://vpic.nhtsa.dot.gov/api/vehicles/DecodeVin/${vin}?format=json`);
            const data = await response.json();

            // Filter out rows where Value is "N/A" or "Not Applicable"
            const results = data.Results.filter(result => result.Value && result.Value !== 'N/A' && result.Value !== 'Not Applicable');
            if (results.length === 0) {
                cell.innerHTML = '<p>No additional data available.</p>';
                return;
            }

            console.log("Rendering subtable with API data."); // Debugging log

            // Pagination variables
            const pageSize = 5;
            let currentPage = 1;

            // Function to render the subtable with pagination
            function renderSubTable() {
                const startIndex = (currentPage - 1) * pageSize;
                const paginatedResults = results.slice(startIndex, startIndex + pageSize);

                // Add empty rows if the last page has fewer than 5 rows
                const emptyRows = pageSize - paginatedResults.length;
                const emptyRowHtml = Array(emptyRows).fill(`
                    <tr>
                        <td colspan="2">&nbsp;</td>
                    </tr>
                `).join('');

                const subTable = `
                    <table class="table table-bordered mt-2">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Entry</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${paginatedResults.map(result => `
                                <tr>
                                    <td>${result.Variable}</td>
                                    <td>${result.Value}</td>
                                </tr>
                            `).join('')}
                            ${emptyRowHtml} <!-- Add empty rows here -->
                        </tbody>
                    </table>
                    <div class="pagination">
                        <button class="btn btn-sm btn-primary" ${currentPage === 1 ? 'disabled' : ''} data-direction="-1">Previous</button>
                        <span> Page ${currentPage} of ${Math.ceil(results.length / pageSize)} </span>
                        <button class="btn btn-sm btn-primary" ${currentPage === Math.ceil(results.length / pageSize) ? 'disabled' : ''} data-direction="1">Next</button>
                    </div>
                `;
                cell.innerHTML = subTable;

                // Add event listeners for pagination buttons
                const buttons = cell.querySelectorAll('.pagination button');
                buttons.forEach(button => {
                    button.addEventListener('click', (event) => {
                        const direction = parseInt(event.target.getAttribute('data-direction'));
                        changePage(direction);
                    });
                });
            }

            // Function to handle page changes
            function changePage(direction) {
                currentPage += direction;
                renderSubTable();
            }

            // Render the initial subtable
            renderSubTable();
        } catch (error) {
            console.error("Error fetching data from API:", error); // Debugging log
            cell.innerHTML = `<p>Error loading data: ${error.message}</p>`;
        }
    }
</script>