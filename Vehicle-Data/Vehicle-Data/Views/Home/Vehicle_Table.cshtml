@model IEnumerable<Vehicle_Data.Models.VehicleModel>

@{
    ViewData["Title"] = "Vehicle Table";
    int pageNumber = ViewBag.PageNumber ?? 1;
    int pageSize = ViewBag.PageSize ?? 10;
    int totalRecords = ViewBag.TotalRecords ?? 0;
    int totalPages = (int)Math.Ceiling((double)totalRecords / pageSize);
    int? dealerId = ViewBag.DealerId;
    DateOnly? modifiedDate = ViewBag.ModifiedDate;
}

<div class="container mt-4">
    <div class="row mb-4">
        <div class="col">
            <h2>Vehicle Table</h2>
            <p class="text-muted">A list of all vehicles in the system including their VIN, make, model, and year.</p>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-8">
            <form method="get" class="form-inline">
                <div class="form-group mx-sm-3 mb-2">
                    <label for="dealerId" class="mr-2">Dealer ID:</label>
                    <input type="number" class="form-control" id="dealerId" name="dealerId" value="@dealerId">
                </div>
                <div class="form-group mx-sm-3 mb-2">
                    <label for="modifiedDate" class="mr-2">Modified Date:</label>
                    <input type="date" class="form-control" id="modifiedDate" name="modifiedDate" value="@(modifiedDate?.ToString("yyyy-MM-dd"))">
                </div>
                <button type="submit" class="btn btn-primary mb-2">Filter</button>
            </form>
        </div>
        <div class="col-md-4 text-right">
            <!-- <button type="button" onclick="importVehicles()" class="btn btn-secondary">Import Vehicles</button> -->
            <button type="button" onclick="augmentVehicles()" class="btn btn-info">Augment Vehicles</button>
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Dealer ID</th>
                    <th>VIN</th>
                    <th>Make</th>
                    <th>Model</th>
                    <th>Year</th>
                    <th>Modified Date</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var vehicle in Model)
                {
                    <tr onclick="toggleRowDetails(this, '@vehicle.Vin')" style="cursor: pointer;">
                        <td>@vehicle.DealerId</td>
                        <td>@vehicle.Vin</td>
                        <td>@vehicle.Make</td>
                        <td>@vehicle.Model</td>
                        <td>@vehicle.Year</td>
                        <td>@vehicle.ModifiedDate.ToString("yyyy-MM-dd")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <label for="pageSize">Items per page:</label>
                <select id="pageSize" class="form-control" onchange="changePageSize(this.value)" style="width: auto; display: inline-block;">
                    <option value="10" selected="@(pageSize == 10)">10</option>
                    <option value="25" selected="@(pageSize == 25)">25</option>
                    <option value="50" selected="@(pageSize == 50)">50</option>
                </select>
            </div>
        </div>
        <div class="col-md-6">
            <nav aria-label="Page navigation">
                <ul class="pagination justify-content-end">
                    <li class="page-item @(pageNumber == 1 ? "disabled" : "")">
                        <a class="page-link" href="@Url.Action("Vehicle_Table", new { pageNumber = pageNumber - 1, pageSize, dealerId, modifiedDate })">Previous</a>
                    </li>
                    @for (int i = 1; i <= totalPages; i++)
                    {
                        <li class="page-item @(i == pageNumber ? "active" : "")">
                            <a class="page-link" href="@Url.Action("Vehicle_Table", new { pageNumber = i, pageSize, dealerId, modifiedDate })">@i</a>
                        </li>
                    }
                    <li class="page-item @(pageNumber == totalPages ? "disabled" : "")">
                        <a class="page-link" href="@Url.Action("Vehicle_Table", new { pageNumber = pageNumber + 1, pageSize, dealerId, modifiedDate })">Next</a>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentlyExpandedRow = null;

        async function toggleRowDetails(row, vin) {
            // Close the currently expanded row if it's not the same as the clicked row
            if (currentlyExpandedRow && currentlyExpandedRow !== row) {
                const previousDetailsRow = currentlyExpandedRow.nextElementSibling;
                if (previousDetailsRow && previousDetailsRow.classList.contains('details-row')) {
                    previousDetailsRow.remove();
                }
                currentlyExpandedRow = null;
            }

            // Check if the clicked row is already expanded
            const detailsRow = row.nextElementSibling;
            if (detailsRow && detailsRow.classList.contains('details-row')) {
                detailsRow.remove();
                currentlyExpandedRow = null;
                return;
            }

            // Create a new details row
            const newRow = document.createElement('tr');
            newRow.classList.add('details-row');
            const cell = document.createElement('td');
            cell.colSpan = row.children.length;

            // Add a loading spinner
            cell.innerHTML = `
                <div class="text-center p-3">
                    <div class="spinner-border text-primary" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>
            `;
            newRow.appendChild(cell);
            row.parentNode.insertBefore(newRow, row.nextSibling);

            currentlyExpandedRow = row;

            try {
                // Fetch data from the NHTSA API
                const response = await fetch(`https://vpic.nhtsa.dot.gov/api/vehicles/DecodeVin/${vin}?format=json`);
                const data = await response.json();

                // Filter out rows where Value is "N/A" or "Not Applicable"
                const results = data.Results.filter(result => result.Value && result.Value !== 'N/A' && result.Value !== 'Not Applicable');
                if (results.length === 0) {
                    cell.innerHTML = '<p class="text-center text-muted py-3">No additional data available.</p>';
                    return;
                }

                // Pagination variables
                const pageSize = 5;
                let currentPage = 1;

                // Function to render the subtable with pagination
                function renderSubTable() {
                    const startIndex = (currentPage - 1) * pageSize;
                    const paginatedResults = results.slice(startIndex, startIndex + pageSize);

                    const subTable = `
                        <div class="p-3">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Entry</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${paginatedResults.map(result => `
                                        <tr>
                                            <td>${result.Variable}</td>
                                            <td>${result.Value}</td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                            <div class="d-flex justify-content-between align-items-center mt-3">
                                <button class="btn btn-sm btn-outline-primary ${currentPage === 1 ? 'disabled' : ''}" 
                                    data-direction="-1" ${currentPage === 1 ? 'disabled' : ''}>
                                    Previous
                                </button>
                                <span class="text-muted">Page ${currentPage} of ${Math.ceil(results.length / pageSize)}</span>
                                <button class="btn btn-sm btn-outline-primary ${currentPage === Math.ceil(results.length / pageSize) ? 'disabled' : ''}" 
                                    data-direction="1" ${currentPage === Math.ceil(results.length / pageSize) ? 'disabled' : ''}>
                                    Next
                                </button>
                            </div>
                        </div>
                    `;
                    cell.innerHTML = subTable;

                    // Add event listeners for pagination buttons
                    const buttons = cell.querySelectorAll('button[data-direction]');
                    buttons.forEach(button => {
                        button.addEventListener('click', (event) => {
                            const direction = parseInt(event.target.getAttribute('data-direction'));
                            changePage(direction);
                        });
                    });
                }

                // Function to handle page changes
                function changePage(direction) {
                    currentPage += direction;
                    renderSubTable();
                }

                // Render the initial subtable
                renderSubTable();
            } catch (error) {
                console.error("Error fetching data from API:", error);
                cell.innerHTML = `<p class="text-center text-danger py-3">Error loading data: ${error.message}</p>`;
            }
        }

        function changePageSize(size) {
            window.location.href = '@Url.Action("Vehicle_Table")' + 
                '?pageNumber=1' +
                '&pageSize=' + size +
                '&dealerId=@dealerId' +
                '&modifiedDate=@(modifiedDate?.ToString("yyyy-MM-dd"))';
        }

        function importVehicles() {
            if (confirm('Are you sure you want to import vehicles from the CSV file?')) {
                fetch('/api/vehicle/import', {
                    method: 'POST'
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    const message = `Import completed:\n` +
                        `Total Processed: ${data.totalProcessed}\n` +
                        `Successfully Imported: ${data.successfullyImported}\n` +
                        `Errors: ${data.errors.length > 0 ? data.errors.join('\n') : 'None'}`;
                    alert(message);
                    location.reload();
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error importing vehicles: ' + error.message);
                });
            }
        }

        function augmentVehicles() {
            if (confirm('Are you sure you want to augment vehicle data from the NHTSA API?')) {
                fetch('/api/vehicle/augment', {
                    method: 'POST'
                })
                .then(response => response.json())
                .then(data => {
                    alert('Augmentation completed: ' + data.message);
                    location.reload();
                })
                .catch(error => {
                    alert('Error augmenting vehicles: ' + error);
                });
            }
        }
    </script>
}